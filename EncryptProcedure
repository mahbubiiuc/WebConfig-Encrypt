The following command will create the "MyKeys" key container:
aspnet_regiis -pc "MyKeys" -exp

to grant the identity access to the RSA key container by running aspnet_regiis.exe:
aspnet_regiis -pa "MyKeys" "NT AUTHORITY\NETWORK SERVICE"

the following command encrypts the section of the Web.config file for an application named MyApplication:
aspnet_regiis -pe "connectionStrings" -app "/MyApplication" -prov "MyProvider"

Add a section that includes an instance of the RSAProtectedConfigurationProvider class named "MyProvider" that uses the machine-level RSA key container named "MyKeys", as shown in the following example:
<configuration> <configProtectedData> <providers> <add name="MyProvider" type="System.Configuration.RsaProtectedConfigurationProvider, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" keyContainerName="MyKeys" useMachineContainer="true" /> </providers> </configProtectedData>
<connectionStrings> <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=Northwind;" /> </connectionStrings> </configuration>

the following command encrypts the section of the Web.config file for an application named MyApplication:
aspnet_regiis -pe "connectionStrings" -app "/MyApplication" -prov "MyProvider"

the following command exports the machine-level RSA key container named "MyKeys" to an .xml file named keys.xml in the root directory of drive C:
aspnet_regiis -px "MyKeys" "c:\keys.xml" -pri

the following command deletes "MyKeys":
aspnet_regiis -pz "MyKeys"

the following command imports the RSA key container named "MyKeys":
aspnet_regiis -pi "MyKeys" "c:\keys.xml"
